# noinspection PyPackageRequirements
import telebot
from telebot import types
from dotenv import load_dotenv, find_dotenv
import os
from parsers import valid_time, parse_time, tier
import datetime
from time import sleep
from random import choice
from sqltable import get_player_score, get_game, game_status_change, game_status_check, \
    change_player_score, get_id_chats, all_players, all_games, add_game, \
    player_status_change, total_players, all_games_online

load_dotenv(find_dotenv())
bot = telebot.TeleBot(os.getenv('TELEGRAMM_TOKEN'))
DEV_MODE =(True if os.getenv('DEV_MODE') == "True" else False) # ToDo: need dev_mode
temp_moments = dict()
emoji = ["ü™ô", "üíµ", "üí∞", "üíé", "üëë"]
congratulations = ["–£—Å–ø–µ–ª üòâ", "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—åü§™", "–ê–π –º–æ–ª–æ–¥–µ—Ü üòé", "–¢–∞–∫ –º–æ–≥—É—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –ª–∏—à—å –≤—Å–µ ü•ä"]
excluded_markdown = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
censures = ["–±–ª—è", "–±–ª–∏—è", "–±–∏–ª—è", "—Å—É–∫–∞", "–ø–∏–∑–¥", "–ø–∑–¥—Ü", "—Ö—É–π", "–∞—Ö—É–µ", "—á–º–æ", "–ø–∏–∑–¥–∞", "–ø–∏–¥–æ—Ä",
            "—Ñ–∞–∫", "fuck", "–¥–æ–ª–±–æ–µ–±", "–¥–æ–ª–±–∞–µ–±", "–∑–∞–ª—É–ø", "–µ–±–∞–ª"]
cur_cheater = None


def is_delayed_message(date):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ (–∂—É–ª—å–Ω–∏—á–µ—Å—Ç–≤–æ)"""
    message_time = datetime.datetime.fromtimestamp(date).strftime("%S")
    if int(message_time) < 3:
        return True
    else:
        return False


@bot.message_handler(commands=['time'])
def cur_time(message):
    time_current_mesage = datetime.datetime.fromtimestamp(message.date).strftime('%H:%M:%S')
    bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –≤—Ä–µ–º—è: "+time_current_mesage, parse_mode="Markdown")


@bot.message_handler(commands=['start'])
def start_message(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    mess = """–ò–≥—Ä–∞ INtime
–ü—Ä–∞–≤–∏–ª–∞
–ò–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫—Ä–∞—Å–∏–≤–æ–µ –≤—Ä–µ–º—è –≤ —ç—Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è. –ó–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—á–∫–∏.
–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
10:01 - 1 –æ—á–∫–æ - (–∑–µ—Ä–∫–∞–ª–æ)
10:10 - 2 –æ—á–∫–∞ - (–¥–≤–æ–π–Ω—è—à–∫–∏)
11:11 - 3 –æ—á–∫–∞ - (–∑–∞–±–æ—Ä)
12:34 - 4 –æ—á–∫–∞ - (—Ñ–ª–µ—à —Ä–æ—è–ª—å)

–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ 125 –æ—á–∫–æ–≤. –ö—Ç–æ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —Ñ–∏–Ω–∏—à–∞, –≤—ã–π–≥—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è.
–í—Å–µ –æ—á–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤–µ–¥—É—Ç—å—Å—è –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –∏–≥—Ä—ã –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤–µ–¥–µ—Ç—å—Å—è –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.
–ï—Å—Ç—å –≥—Ä–∞–¥–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π –∏–≥—Ä—ã. –£—Ä–æ–≤–µ–Ω—å —Å–º–µ–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –Ω–∞–±–∏—Ä–∞–µ—Ç 25, 50, 75, 100, 125 –æ—á–∫–æ–≤.
–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/startgame "–∏–º—è –∏–≥—Ä—ã" - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
/endgame - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É.
(–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ –ø–æ–ª–æ–≤–∏–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –≤—ã–π—Ç–∏)
/games - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
/connect "–∏–º—è –∏–≥—Ä—ã" - –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
/top - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
/total - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞–º
/start - –ø–æ–º–æ—â—å"""

    bot.send_message(message.chat.id, mess, parse_mode="Markdown")


@bot.message_handler(commands=['connect'])
def connect(message):
    """–ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –∫ –∏–≥—Ä–µ. –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–º—è"""
    command_args = message.text.split(' ')
    if len(command_args) == 2:
        game_name = command_args[1]
        if game_name in all_games_online():
            add_game(message.chat.id, game_name)
            bot.reply_to(message, f"–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ: *{game_name}* üöÄ", parse_mode="Markdown")
        else:
            bot.reply_to(message, "–í —Ç–∞–∫—É—é –∏–≥—Ä—É –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç ü§î")
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã */connect* üñ•Ô∏è", parse_mode="Markdown")


@bot.message_handler(commands=['games'])
def games(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä"""
    mess = "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã:\n" + "üéÆ "+('\nüéÆ '.join(all_games_online()) or "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä")
    bot.reply_to(message, mess, parse_mode="Markdown")


@bot.message_handler(commands=['startgame'])
def start_game(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã,
    –ø–æ—Å–ª–µ —á–µ–≥–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –º–µ—à–∞—é—â–∏–µ MARKDOWNv2"""
    command_args = message.text.split(' ')
    if len(command_args) == 2:
        game_name = command_args[1]
        for letter in game_name:
            if letter in excluded_markdown:
                game_name = game_name.replace(letter, "")
        if game_name not in all_games():
            cur_game = get_game(message.chat.id)
            if not cur_game:
                add_game(message.chat.id, game_name)
                change_player_score(message.chat.id, message.from_user.username, score=0)
                bot.reply_to(message, f"–í–∞—à–∞ –∏–≥—Ä–∞: {game_name}, –Ω–∞—á–∞–ª–∞—Å—å üöÄ", parse_mode="Markdown")
            else:
                bot.reply_to(message, f"–ú—ã —É–∂–µ —Ç—É—Ç –∏–≥—Ä–∞–µ–º. –í–∞—à–∞ –∏–≥—Ä–∞: {cur_game[0]} üéÆ", parse_mode="Markdown")
        else:
            bot.reply_to(message, "–¢–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ü§î", parse_mode="Markdown")
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /startgame", parse_mode="Markdown")


@bot.message_handler(commands=['endgame'])
def end_game(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã. –ì–æ–ª–æ—Å—É–µ–º –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ç—Ä–æ–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∏–ª–∏ –ø–æ–ª–æ–≤–∏–Ω–∞,
    –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è –≤ –Ω–∏–∂–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—É, —Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∏–≥—Ä—É"""
    game_name, game_status = get_game(message.chat.id)
    if game_status:
        status_of_players = player_status_change(game_name, name=message.from_user.username)
        mess = f"–¢—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É: {game_name} üõë"
        bot.reply_to(message, mess, parse_mode="Markdown")
        if -(-len(status_of_players) // 2) == len(tuple(filter(lambda x: x[1] is False, status_of_players))) or \
                len(tuple(filter(lambda x: x[1] is False, status_of_players))) > 3:
            mess = f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*{game_name}*\n\n" + \
                   "\n".join([f'{player[0]}: {(player[1] and "–í –∏–≥—Ä–µ ‚úÖ" or "—Ö–æ—á–µ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—å üõë")}' for player in
                              status_of_players])
            mess_end = f"–ö–û–ù–ï–¶ –ò–ì–†–´ üëâ{game_name}üëà\n\n{mess}"
            list_chats = get_id_chats(game_name)
            for chat_id in list_chats:
                bot.send_message(chat_id, mess_end, parse_mode="Markdown")
            game_status_change(message.chat.id)
    else:
        mess = "ü´† –¢—É—Ç –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É üöÄ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–¥–Ω–æ–π –∏–∑ –∞–∫—Ç–≤–Ω—ã—Ö –∏–≥—Ä üñ•Ô∏è"
        bot.reply_to(message, mess, parse_mode="Markdown")


@bot.message_handler(commands=['top'])
def top_players_message(message):
    cur_game = get_game(message.chat.id)
    if cur_game:
        top_players = all_players(message.chat.id).items()
        sort_top_players = sorted(top_players, key=lambda x: int(x[1]), reverse=True)
        scores = []
        for player, score in sort_top_players:
            scores.append(f"{player}: {score} {emoji[tier(score)]}")
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º gif –∞–Ω–∏–º–∞—Ü–∏—é –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        mess = f"ü§ú *–¢–û–ü –ò–ì–†–û–ö–û–í –í üëâ{cur_game[0]}üëà*\n\n" + "\n".join(scores)
        bot.send_animation(message.chat.id, open('images/top.gif', 'rb'), caption=mess, parse_mode="MarkdownV2")
    else:
        bot.reply_to(message, "–¢—É—Ç –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç üòî", parse_mode="Markdown")


@bot.message_handler(commands=['total'])
def total_players_message(message):
    total = total_players()
    sorted_total = sorted(total.items(), key=lambda x: int(x[1]), reverse=True)
    scores = []
    for player, score in sorted_total:
        scores.append(f"{player}: {score} {emoji[tier(score/10)]}")
    mess = f"ü§ú *–û–ë–©–ò–ô –°–ß–ï–¢*\n\n" + "\n".join(scores)
    bot.send_animation(message.chat.id, open('images/total.gif', 'rb'), caption=mess, parse_mode="MarkdownV2")


@bot.message_handler(content_types=['text'])
def get_time_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ÃÜ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏–≥—Ä—ã –≤ '–≤—Ä–µ–º—è'"""
    if game_status_check(message.chat.id):
        time_current_mesage = datetime.datetime.fromtimestamp(message.date).strftime('%H:%M')
        if valid_time(message.text):
            scores = get_player_score(message.chat.id, message.from_user.username)
            if time_current_mesage == message.text.strip() or DEV_MODE:
                global cur_cheater
                if is_delayed_message(date=message.date):
                    mess = f"{message.from_user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–º–µ–¥–ª–µ–Ω–Ω–µ–µ, —è –∑–∞–ø–∏—Å—ã–≤–∞—é. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.‚¨áÔ∏è"
                    gif = open('images/cheater.gif', 'rb')
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    item1 = types.KeyboardButton(message.text.strip())
                    markup.add(item1)
                    bot.send_animation(message.chat.id, gif, caption=mess, parse_mode="Markdown", reply_markup=markup)
                    cur_cheater = message.from_user.username
                else:
                    if temp_moments.get(message.from_user.username) != message.date:
                        score = parse_time(message.text)
                        if score:
                            temp_moments[message.from_user.username] = message.date
                            change_player_score(message.chat.id, message.from_user.username, score)
                            scores = get_player_score(message.chat.id, message.from_user.username)
                            gif = open(f'images/tier{tier(scores)}/{score}.gif', 'rb')
                            mess = f"*{message.from_user.first_name}*, {congratulations[score-1]}\n\n" + \
                                f"–î–µ—Ä–∂–∏ {emoji[tier(scores)]*score}\n\n–¢–≤–æ–π —Å—á–µ—Ç: *{scores}* {emoji[tier(scores)]}"
                            if cur_cheater == message.from_user.username:
                                bot.send_animation(message.chat.id, gif, caption=mess, parse_mode="MarkdownV2", reply_markup=types.ReplyKeyboardRemove())
                                cur_cheater = None
                            else:
                                bot.send_animation(message.chat.id, gif, caption=mess, parse_mode="MarkdownV2")
                            if scores >= 125:
                                gif_winner = open(f'images/winner.gif', 'rb')
                                gif_loser = open(f'images/loser.gif', 'rb')
                                mess_win = f"–í–û–û–¢ –≠–¢–û –î–ê–ê–ê, *{message.from_user.first_name}* üéâüéâüéâ.\n\n" + \
                                f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏–≥—Ä—É —Å–æ —Å—á–µ—Ç–æ–º *{scores}* {emoji[tier(scores)]}\n\n"

                                def final_text(original_text):
                                    top_players = all_players(message.chat.id).items()
                                    sort_top_players = sorted(top_players, key=lambda x: int(x[1]), reverse=True)
                                    players_scores = []
                                    for player_name, player_score in sort_top_players:
                                        players_scores.append(f"{player_name}: {player_score} {emoji[tier(score)]}")
                                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º gif –∞–Ω–∏–º–∞—Ü–∏—é –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    original_text += f"ü§ú *–†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ì–†–´ üëâ{get_game(message.chat.id)[0]}üëà*\n\n" + \
                                                    "\n".join(players_scores)
                                    return original_text
                                
                                bot.send_animation(message.chat.id, gif_winner, caption=final_text(mess_win),
                                                parse_mode="Markdown")
                                mess_loser = f"–ö–û–ù–ï–¶ –ò–ì–†–´. *{message.from_user.first_name}* " + \
                                    f"–ø–æ–±–µ–¥–∏–ª —Å–æ —Å—á–µ—Ç–æ–º *{scores}* {emoji[tier(scores)]}\n\n"

                                list_chats = get_id_chats(get_game(message.chat.id)[0])
                                list_chats.remove(str(message.chat.id))
                                for chat_id in list_chats:
                                    sleep(0.3)
                                    text = final_text(mess_loser)
                                    gif_loser.seek(0)
                                    bot.send_animation(chat_id, gif_loser, caption=text, parse_mode="Markdown")
                                    
                                game_status_change(message.chat.id)
                    else:
                        mess = "–•–∞-–•–∞! –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üòÄ"
                        bot.send_message(message.chat.id, mess, parse_mode="Markdown")
            else:
                gif = open(f'images/tier{tier(scores)}/no.gif', "rb")
                bot.send_animation(message.chat.id, gif, caption="–ù–µ –≤—ã—à–ª–æ...", reply_markup=types.ReplyKeyboardRemove())

        elif any([x in message.text.lower() for x in censures]):
            mess = f"–ü–æ–ø—Ä–æ—à—É –í–∞—Å –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è, {message.from_user.first_name}..."
            gif = open('images/consored.gif', 'rb')
            bot.send_animation(message.chat.id, gif, caption=mess, reply_to_message_id=message.message_id)


if __name__ == "__main__":
    bot.infinity_polling(skip_pending=True, none_stop=True)
